{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ChatComponent = class ChatComponent {\n  constructor(chatbotService) {\n    this.chatbotService = chatbotService;\n    this.chatOpen = false;\n    this.isTyping = false;\n    this.messages = [];\n  }\n  openChat() {\n    this.chatOpen = true;\n  }\n  closeChat() {\n    this.chatOpen = false;\n  }\n  sendMessage(input) {\n    const message = input.value;\n    if (message.trim()) {\n      this.messages.push({\n        text: message,\n        sender: 'user'\n      });\n      input.value = '';\n      this.simulateServerResponse(message);\n    }\n  }\n  simulateServerResponse(userMessage) {\n    this.isTyping = true;\n    // Simulazione della risposta del chatbot (puoi sostituirla con una chiamata al backend)\n    setTimeout(() => {\n      this.isTyping = false;\n      let serverResponse = '';\n      if (userMessage.toLowerCase().includes('ciao')) {\n        serverResponse = 'Ciao! Come posso aiutarti?';\n      } else if (userMessage.toLowerCase().includes('come va')) {\n        serverResponse = 'Va tutto bene, grazie! E tu?';\n      } else {\n        serverResponse = 'Non sono sicuro di come rispondere a questo.';\n      }\n      this.messages.push({\n        text: serverResponse,\n        sender: 'server'\n      });\n    }, 2000); // Simula una risposta dopo 2 secondi\n    // Per inviare la richiesta al tuo backend, usa il servizio (vedi sotto)\n    // this.chatbotService.getChatbotResponse(userMessage).subscribe(response => {\n    //   this.isTyping = false;\n    //   this.messages.push({ text: response.message, sender: 'server' });\n    // });\n  }\n\n  onKeydown(event, input) {\n    if (event.key === 'Enter') {\n      this.sendMessage(input);\n    }\n  }\n};\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})], ChatComponent);","map":{"version":3,"names":["Component","ChatComponent","constructor","chatbotService","chatOpen","isTyping","messages","openChat","closeChat","sendMessage","input","message","value","trim","push","text","sender","simulateServerResponse","userMessage","setTimeout","serverResponse","toLowerCase","includes","onKeydown","event","key","__decorate","selector","templateUrl","styleUrls"],"sources":["/workspaces/Chat_bot_Site/frontend/src/app/chat/chat.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent {\n  chatOpen = false;\n  isTyping = false;\n  messages: { text: string, sender: string }[] = [];\n\n  constructor(private chatbotService: ChatbotService) {}\n\n  openChat() {\n    this.chatOpen = true;\n  }\n\n  closeChat() {\n    this.chatOpen = false;\n  }\n\n  sendMessage(input: HTMLInputElement) {\n    const message = input.value;\n    if (message.trim()) {\n      this.messages.push({ text: message, sender: 'user' });\n      input.value = '';\n      this.simulateServerResponse(message);\n    }\n  }\n\n  simulateServerResponse(userMessage: string) {\n    this.isTyping = true;\n\n    // Simulazione della risposta del chatbot (puoi sostituirla con una chiamata al backend)\n    setTimeout(() => {\n      this.isTyping = false;\n\n      let serverResponse = '';\n      if (userMessage.toLowerCase().includes('ciao')) {\n        serverResponse = 'Ciao! Come posso aiutarti?';\n      } else if (userMessage.toLowerCase().includes('come va')) {\n        serverResponse = 'Va tutto bene, grazie! E tu?';\n      } else {\n        serverResponse = 'Non sono sicuro di come rispondere a questo.';\n      }\n\n      this.messages.push({ text: serverResponse, sender: 'server' });\n    }, 2000); // Simula una risposta dopo 2 secondi\n\n    // Per inviare la richiesta al tuo backend, usa il servizio (vedi sotto)\n    // this.chatbotService.getChatbotResponse(userMessage).subscribe(response => {\n    //   this.isTyping = false;\n    //   this.messages.push({ text: response.message, sender: 'server' });\n    // });\n  }\n\n  onKeydown(event: KeyboardEvent, input: HTMLInputElement) {\n    if (event.key === 'Enter') {\n      this.sendMessage(input);\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAKxBC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAJlC,KAAAC,QAAQ,GAAG,KAAK;IAChB,KAAAC,QAAQ,GAAG,KAAK;IAChB,KAAAC,QAAQ,GAAuC,EAAE;EAEI;EAErDC,QAAQA,CAAA;IACN,IAAI,CAACH,QAAQ,GAAG,IAAI;EACtB;EAEAI,SAASA,CAAA;IACP,IAAI,CAACJ,QAAQ,GAAG,KAAK;EACvB;EAEAK,WAAWA,CAACC,KAAuB;IACjC,MAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK;IAC3B,IAAID,OAAO,CAACE,IAAI,EAAE,EAAE;MAClB,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAAC;QAAEC,IAAI,EAAEJ,OAAO;QAAEK,MAAM,EAAE;MAAM,CAAE,CAAC;MACrDN,KAAK,CAACE,KAAK,GAAG,EAAE;MAChB,IAAI,CAACK,sBAAsB,CAACN,OAAO,CAAC;;EAExC;EAEAM,sBAAsBA,CAACC,WAAmB;IACxC,IAAI,CAACb,QAAQ,GAAG,IAAI;IAEpB;IACAc,UAAU,CAAC,MAAK;MACd,IAAI,CAACd,QAAQ,GAAG,KAAK;MAErB,IAAIe,cAAc,GAAG,EAAE;MACvB,IAAIF,WAAW,CAACG,WAAW,EAAE,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC9CF,cAAc,GAAG,4BAA4B;OAC9C,MAAM,IAAIF,WAAW,CAACG,WAAW,EAAE,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACxDF,cAAc,GAAG,8BAA8B;OAChD,MAAM;QACLA,cAAc,GAAG,8CAA8C;;MAGjE,IAAI,CAACd,QAAQ,CAACQ,IAAI,CAAC;QAAEC,IAAI,EAAEK,cAAc;QAAEJ,MAAM,EAAE;MAAQ,CAAE,CAAC;IAChE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAEV;IACA;IACA;IACA;IACA;EACF;;EAEAO,SAASA,CAACC,KAAoB,EAAEd,KAAuB;IACrD,IAAIc,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;MACzB,IAAI,CAAChB,WAAW,CAACC,KAAK,CAAC;;EAE3B;CACD;AAvDYT,aAAa,GAAAyB,UAAA,EALzB1B,SAAS,CAAC;EACT2B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACW5B,aAAa,CAuDzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}